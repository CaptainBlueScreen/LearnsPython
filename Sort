# Bubble Sort
def bubbleSort(arr):
  length = len(arr)
  for i in range(length):
    for j in range(1, length - i):
      if arr[j] < arr[j-1]:
        swap(arr, j, j-1)

  return arr
  
# Exchange Sort
def exchangeSort(arr):
  l = len(arr)
  for i in range(l):
    for j in range(i+1, l):
      if arr[j] < arr[i]:
        swap(arr, j, i)
    
  return arr

# Merge Sort
def mergeSort(arr):
  mid = len(arr)//2
  if(len(arr) <= 1):
    return arr
  left = mergeSort(arr[:mid])
  right = mergeSort(arr[mid:])

  i = 0
  while len(left) > 0 or len(right) > 0:
    if len(right) == 0 or (len(left) > 0 and left[0] <= right[0]):
      arr[i] = left[0]
      left = left[1:]
    else:
      arr[i] = right[0]
      right = right[1:]
    i += 1
    
  return arr

# Selection Sort
def selectionSort(arr):
  l = len(arr)
  for i in range(l):
    c = i
    for j in range(i+1, l):
      if arr[j] < arr[c]:
        c = j
    swap(arr, c, i)
    
  return arr

# Pancake Sort
def pancakeSort(arr):
  l = len(arr)
  for i in range(l):
    maxI = 0
    for j in range(l-i):
      if arr[maxI] < arr[j]:
        maxI = j
    pancakeSortFlip(arr, maxI+1)
    pancakeSortFlip(arr, l-i)

def pancakeSortFlip(arr, k):
  for i in range(k//2):
    swap(arr, k-i-1, i)
  
# Quick Sort
def quickSort(arr):
  quickSortRec(arr, 0, len(arr)-1)

def quicksSortPartition(arr, start, end):
  i = start
  pivot = arr[end]
  for j in range(start,end):
    if arr[j] <= pivot:
      swap(arr, i, j)
      i += 1
  swap(arr, i, end)
  return i
 
def quickSortRec(arr, start, end):
  if end - start < 1: return
  i = quicksSortPartition(arr, start, end)
  quickSortRec(arr, start, i-1)
  quickSortRec(arr, i+1, end)


# Swap
def swap(arr, i, j):
  arr[i], arr[j] = arr[j], arr[i]
